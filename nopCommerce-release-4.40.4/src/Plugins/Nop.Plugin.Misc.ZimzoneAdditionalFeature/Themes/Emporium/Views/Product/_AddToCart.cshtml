@model ProductDetailsModel.AddToCartModel
@inject GiftVoucherSettings giftVoucherSettings
@inject IProductService productService
@inject IPriceFormatter priceFormatter
@inject ILocalizationService localizationService
@inject CurrencySettings currencySettings
@inject IWorkContext workContext
@using Nop.Core.Domain.Orders

@if (Model.UpdatedShoppingCartItemId > 0)
{
    <input asp-for="UpdatedShoppingCartItemId" type="hidden" />
}


@if (!Model.DisableBuyButton || Model.CustomerEntersPrice)
{
    @if (Model.CustomerEntersPrice)
    {
        var isZimazonGiftCard = (productService.GetProductByIdAsync(Model.ProductId).Result?.Sku == giftVoucherSettings.ZimazonGiftProductSku);
        var isPrimaryCurrency = workContext.GetWorkingCurrencyAsync().Result?.Id == currencySettings.PrimaryStoreCurrencyId;
        var priceRange = !isPrimaryCurrency && isZimazonGiftCard ? string.Format(localizationService.GetResourceAsync("Products.EnterProductPrice.Range").Result, priceFormatter.FormatPriceAsync(10, false, false).Result, priceFormatter.FormatPriceAsync(750, false, false).Result) : Model.CustomerEnteredPriceRange;
        var customerEnterdPrice = Convert.ToInt32(Math.Ceiling(Model.CustomerEnteredPrice));
        if (customerEnterdPrice < 10)
        {
            customerEnterdPrice = 10;
        }

        <div class="customer-entered-price">
            <div class="price-input">
                @await Component.InvokeAsync("Widget", new { widgetZone = GiftVoucherDefaults.CUSTOM_WIDGET_GIFT_VOUCHER_PRICE_SELCT_BUTTONS, additionalData = Model.ProductId })
                <label asp-for="CustomerEnteredPrice" asp-postfix=":" class="enter-price-label"></label>
                @*round price*@
                <input asp-for="CustomerEnteredPrice" oninput="this.value=(parseInt(this.value)||0)" value="@customerEnterdPrice" class="enter-price-input" />
            </div>

            <div class="price-range">
                @priceRange
            </div>


            @await Component.InvokeAsync("Widget", new { widgetZone = GiftVoucherDefaults.CUSTOM_WIDGET_GIFT_VOUCHER_DELIVERYDATE, additionalData = Model.ProductId })
        </div>
    }
    @if (!string.IsNullOrEmpty(Model.MinimumQuantityNotification))
    {
        <div class="min-qty-notification">@Model.MinimumQuantityNotification</div>
    }
    <div class="add-to-cart">
        @if (!Model.DisableBuyButton)
        {
            <div class="add-to-cart-panel">
                <label asp-for="EnteredQuantity" asp-postfix=":" class="qty-label"></label>
                @if (Model.AllowedQuantities.Count > 0)
                {
                    <select asp-for="EnteredQuantity" asp-items="Model.AllowedQuantities" id="product_enteredQuantity_@Model.ProductId" class="qty-dropdown" aria-label=@T("Products.Qty.AriaLabel")></select>
                    <script asp-location="Footer">
                        $(document).ready(function () {
                            $("#product_enteredQuantity_@Model.ProductId").on("change", function () {
                                var data = {
                                    productId: @Model.ProductId,
                                    quantity: $('#product_enteredQuantity_@Model.ProductId').find(":selected").text()
                                };
                                $(document).trigger({ type: "product_quantity_changed", changedData: data });
                            });
                        });
                    </script>
                }
                else
                {
                    <div class="add-to-cart-qty-wrapper">
                        <input asp-for="EnteredQuantity" id="product_enteredQuantity_@Model.ProductId" class="qty-input" type="text" aria-label=@T("Products.Qty.AriaLabel") />
                        <span class="plus">&#x69;</span>
                        <span class="minus">&#x68;</span>
                    </div>
                    <script asp-location="Footer">
                        //when a customer clicks 'Enter' button we submit the "add to cart" button (if visible)
                        $(document).ready(function() {
                            $("#@Html.IdFor(model => model.EnteredQuantity)").on("keydown", function(event) {
                                if (event.keyCode == 13) {
                                    $("#add-to-cart-button-@Model.ProductId").trigger("click");
                                    return false;
                                }
                            });

                            $("#product_enteredQuantity_@Model.ProductId").on("input propertychange paste", function () {
                                var data = {
                                    productId: @Model.ProductId,
                                    quantity: $('#product_enteredQuantity_@Model.ProductId').val()
                                };
                                $(document).trigger({ type: "product_quantity_changed", changedData: data });
                            });
                        });
                    </script>
                }
                @{
                    var addToCartText = "";
                    if (Model.UpdatedShoppingCartItemId > 0 && Model.UpdateShoppingCartItemType.HasValue && Model.UpdateShoppingCartItemType.Value == ShoppingCartType.ShoppingCart)
                    {
                        addToCartText = T("ShoppingCart.AddToCart.Update").Text;
                    }
                    else
                    {
                        addToCartText = T("ShoppingCart.AddToCart").Text;
                        if (Model.IsRental)
                        {
                            addToCartText = T("ShoppingCart.Rent").Text;
                        }
                        if (Model.AvailableForPreOrder)
                        {
                            addToCartText = T("ShoppingCart.PreOrder").Text;
                        }
                    }
                    <button type="button" id="add-to-cart-button-@Model.ProductId" class="button-1 add-to-cart-button" data-productid="@Model.ProductId" onclick="AjaxCart.addproducttocart_details('@Url.RouteUrl("AddProductToCart-Details", new {productId = Model.ProductId, shoppingCartTypeId = (int) ShoppingCartType.ShoppingCart})', '#product-details-form');return false;">@addToCartText</button>
                }
            </div>
            if (!string.IsNullOrEmpty(Model.PreOrderAvailabilityStartDateTimeUserTime))
            {
                <div class="pre-order-availability-date">
                    <label>@T("ShoppingCart.PreOrderAvailability"):</label>
                    @Html.Raw(Model.PreOrderAvailabilityStartDateTimeUserTime)
                </div>
            }
        }
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsAddInfo, additionalData = Model })
    </div>
}